'''
hospitals/models.py:
originally generated by "django-admin startapp" using Django 2.1.2 for the app "hospitals"
it contains structures of tables HospitalInfo, DepartmentInfo, DoctorInfo, and RegistrationInfo in the database

created on 23 October, 2018

@author: Zhao Jichen and Ye Yifan
'''

from users.models import UserProfile
from django.db import models
from django.utils import timezone


class HospitalInfo( models.Model ):
    '''
    Table HospitalInfo storing the introduction of each hospital.
    '''
    
    name = models.CharField( 'name', max_length = 60, unique = True )
    brief_introduction = models.CharField( 'brief introduction', max_length = 300 )
    detail = models.TextField( 'more details', unique = True )
    address = models.CharField( 'address', max_length = 100, unique = True )
    director = models.CharField( 'director', max_length = 60, unique = True )
    tel = models.CharField( 'tel.', max_length = 20, unique = True )
    
    objects = models.Manager()
    
    class Meta:
        verbose_name = 'Hospital'
    
    def __str__( self ):
        return self.name


class DepartmentInfo( models.Model ):
    '''
    Table DepartmentInfo storing the introduction of departments in each hospital.
    '''
    
    name = models.CharField( 'name', max_length = 30 )
    belong_to = models.ForeignKey( HospitalInfo, verbose_name = 'hospital', on_delete = models.CASCADE )
    brief_introduction = models.CharField( 'brief introduction', max_length = 200 )
    detail = models.TextField( 'more details', unique = True )
    director = models.CharField( 'director', max_length = 60, unique = True )
    tel = models.CharField( 'tel.', max_length = 20, unique = True )
    
    objects = models.Manager()
    
    class Meta:
        unique_together = ( 'name', 'belong_to' )
        verbose_name = 'Department'
    
    def __str__( self ):
        return '{0} of {1}'.format( self.name, self.belong_to )  #return which department of which hospital


class DoctorInfo( models.Model ):
    '''
    Table DoctorInfo storing the introduction of each doctor.
    '''
    
    username = models.OneToOneField( UserProfile, verbose_name = 'username', on_delete = models.CASCADE )
    belong_to = models.ForeignKey( DepartmentInfo, verbose_name = 'workplace', on_delete = models.CASCADE )
    brief_introduction = models.CharField( 'brief introduction', max_length = 100 )
    detail = models.TextField( 'more details', unique = True )
    is_available = models.BooleanField( 'available', default = True )
    is_expert = models.BooleanField( 'expert', default = False )
    
    objects = models.Manager()
    
    class Meta:
        verbose_name = 'Doctor'
    
    def __str__( self ):
        user = UserProfile.objects.get( username = self.username )
        real_name = UserProfile.get_full_name( user )
        
        if real_name == '':
            return '{0} (need real name authentication)'.format( self.username )
        else:
            return real_name
    
    def get_real_name( self ):
        '''
        Add a new column "real name" to Xadmin for the doctor list to display the doctor's real name.
        '''
        
        return str( self )
    get_real_name.short_description = 'real name'


class RegistrationInfo( models.Model ):
    '''
    Table RegistrationInfo storing information related to each registration.
    '''
    
    status_choices = (
        ( '1', 'Awaiting confirmation' ),
        ( '2', 'Accepted' ),
        ( '3', 'Failed' ),
        ( '4', 'Completed' )
    )
    
    patient = models.ForeignKey( UserProfile, verbose_name = 'patient', on_delete = models.CASCADE )
    doctor = models.ForeignKey( DoctorInfo, verbose_name = 'doctor', on_delete = models.CASCADE )
    appointment_time = models.DateTimeField( 'appointment time' )
    submission_time = models.DateTimeField( 'submission time', default = timezone.now )
    status = models.CharField( 'status', max_length = 30, choices = status_choices, default = '1' )
    
    objects = models.Manager()
    
    class Meta:
        verbose_name = 'Registration'
        verbose_name_plural = verbose_name
    
    def __str__( self ):
        return 'Registration {0}'.format( self.id )